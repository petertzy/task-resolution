<div data-message-author-role="assistant" data-message-id="974b9bf4-2143-419b-93d2-b8e6a1ae8377" dir="auto" class="min-h-8 text-message relative flex w-full flex-col items-end gap-2 whitespace-normal break-words text-start [.text-message+&amp;]:mt-5" data-message-model-slug="gpt-4o-mini"><div class="flex w-full flex-col gap-1 empty:hidden first:pt-[3px]"><div class="markdown prose w-full break-words dark:prose-invert light"><p data-start="0" data-end="329">Determining if a user is using a PWA (Progressive Web App) and tracking traffic from PWAs is entirely feasible. This is essential for understanding the adoption of PWAs, user behavior, and evaluating their performance. Here are some common methods to help you determine whether users are using a PWA and how to track PWA traffic:</p>
<h3 data-start="331" data-end="400">1. Client-Side JavaScript Detection (Most Common and Recommended)</h3>
<p data-start="402" data-end="727">This is the most common and reliable method. With client-side JavaScript code, you can detect if the PWA is running in "standalone mode." When a PWA is launched through an installed app icon, it typically runs in standalone mode, hiding the browser's address bar and interface elements, making it look more like a native app.</p>
<p data-start="729" data-end="883">You can use the <code data-start="745" data-end="794">window.matchMedia('(display-mode: standalone)')</code> or <code data-start="798" data-end="820">navigator.standalone</code> JavaScript APIs to determine if the PWA is in standalone mode.</p>
<p data-start="885" data-end="967"><strong data-start="885" data-end="936">window.matchMedia('(display-mode: standalone)')</strong> (More modern and recommended):</p>
<pre class="!overflow-visible" data-start="969" data-end="1334"><div class="overflow-y-auto p-4" dir="ltr"><code class="!whitespace-pre language-javascript"><span><span class="hljs-keyword">function</span> <span class="hljs-title function_">isRunningStandalone</span>(<span class="hljs-params"></span>) {
    <span class="hljs-keyword">return</span> <span class="hljs-variable language_">window</span>.<span class="hljs-title function_">matchMedia</span>(<span class="hljs-string">'(display-mode: standalone)'</span>).<span class="hljs-property">matches</span>;
}

<span class="hljs-keyword">if</span> (<span class="hljs-title function_">isRunningStandalone</span>()) {
    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">"PWA is running in standalone mode"</span>);
    <span class="hljs-comment">// Perform tracking logic for PWA mode here</span>
} <span class="hljs-keyword">else</span> {
    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">"PWA is running in the browser"</span>);
    <span class="hljs-comment">// Perform tracking logic for browser mode here</span>
}
</span></code></div></pre>
<p data-start="1336" data-end="1406"><strong data-start="1336" data-end="1360">navigator.standalone</strong> (Older but still supported by some browsers):</p>
<pre class="!overflow-visible" data-start="1408" data-end="1657"><div class="overflow-y-auto p-4" dir="ltr"><code class="!whitespace-pre language-javascript"><span><span class="hljs-keyword">if</span> (navigator.<span class="hljs-property">standalone</span> === <span class="hljs-literal">true</span>) {
    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">"PWA is running in standalone mode (using navigator.standalone)"</span>);
    <span class="hljs-comment">// ...</span>
} <span class="hljs-keyword">else</span> {
    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">"PWA is running in the browser (using navigator.standalone)"</span>);
    <span class="hljs-comment">// ...</span>
}
</span></code></div></pre>
<p data-start="1659" data-end="1751">Using these detection methods, you can differentiate between two scenarios in your PWA code:</p>
<ul data-start="1753" data-end="2166">
<li data-start="1753" data-end="1908"><strong data-start="1755" data-end="1789">PWA running in standalone mode</strong>: This usually means the user launched the app through the installed PWA icon, and it can be considered as PWA traffic.</li>
<li data-start="1909" data-end="2166"><strong data-start="1911" data-end="1941">PWA running in the browser</strong>: This usually means the user accessed the app through the browser's address bar, browser bookmarks, or external links (like Google search results, Telegram links, etc.), and this can be considered as regular website traffic.</li>
</ul>
<h3 data-start="2168" data-end="2254">2. Integrating Web Analytics Tools (e.g., Google Analytics, Baidu Analytics, etc.)</h3>
<p data-start="2256" data-end="2572">You can integrate commonly used web analytics tools (like Google Analytics, Baidu Analytics, or any other analytics tool used in your project) into your PWA. The key is to combine the aforementioned JavaScript detection methods with your analytics code to distinguish between PWA traffic and regular website traffic.</p>
<p data-start="2574" data-end="2630"><strong data-start="2574" data-end="2630">Method 1: Using Custom Dimensions or User Properties</strong></p>
<p data-start="2632" data-end="2952">This is the recommended method because it's flexible and makes it easy to segment and filter data in reports. In your analytics tool, create a custom dimension or user property, such as "PWA Mode" (or a similar name). The value of this dimension can be "Standalone" (for standalone mode) or "Browser" (for browser mode).</p>
<p data-start="2954" data-end="3055">In the PWA code, combine the JavaScript detection code to set this custom dimension or user property.</p>
<p data-start="3057" data-end="3103">For example, using Google Analytics (gtag.js):</p>
<pre class="!overflow-visible" data-start="3105" data-end="3768"><div class="overflow-y-auto p-4" dir="ltr"><code class="!whitespace-pre language-javascript"><span><span class="hljs-keyword">function</span> <span class="hljs-title function_">isRunningStandalone</span>(<span class="hljs-params"></span>) {
    <span class="hljs-keyword">return</span> <span class="hljs-variable language_">window</span>.<span class="hljs-title function_">matchMedia</span>(<span class="hljs-string">'(display-mode: standalone)'</span>).<span class="hljs-property">matches</span>;
}

<span class="hljs-comment">// Initialize Google Analytics (make sure GA code is configured correctly)</span>
<span class="hljs-comment">// ...</span>

<span class="hljs-keyword">if</span> (<span class="hljs-title function_">isRunningStandalone</span>()) {
    <span class="hljs-title function_">gtag</span>(<span class="hljs-string">'set'</span>, <span class="hljs-string">'user_properties'</span>, { <span class="hljs-attr">pwa_mode</span>: <span class="hljs-string">'Standalone'</span> });
    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">"PWA is running in standalone mode, GA custom dimension pwa_mode: Standalone set"</span>);
} <span class="hljs-keyword">else</span> {
    <span class="hljs-title function_">gtag</span>(<span class="hljs-string">'set'</span>, <span class="hljs-string">'user_properties'</span>, { <span class="hljs-attr">pwa_mode</span>: <span class="hljs-string">'Browser'</span> });
    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">"PWA is running in the browser, GA custom dimension pwa_mode: Browser set"</span>);
}

<span class="hljs-comment">// Pageview tracking (or other event tracking)</span>
<span class="hljs-title function_">gtag</span>(<span class="hljs-string">'config'</span>, <span class="hljs-string">'YOUR_GOOGLE_ANALYTICS_TRACKING_ID'</span>);
</span></code></div></pre>
<p data-start="3770" data-end="3819">Alternatively, use events with custom parameters:</p>
<pre class="!overflow-visible" data-start="3821" data-end="4410"><div class="overflow-y-auto p-4" dir="ltr"><code class="!whitespace-pre language-javascript"><span><span class="hljs-keyword">function</span> <span class="hljs-title function_">isRunningStandalone</span>(<span class="hljs-params"></span>) {
    <span class="hljs-keyword">return</span> <span class="hljs-variable language_">window</span>.<span class="hljs-title function_">matchMedia</span>(<span class="hljs-string">'(display-mode: standalone)'</span>).<span class="hljs-property">matches</span>;
}

<span class="hljs-comment">// Initialize Google Analytics</span>
<span class="hljs-comment">// ...</span>

<span class="hljs-keyword">if</span> (<span class="hljs-title function_">isRunningStandalone</span>()) {
    <span class="hljs-title function_">gtag</span>(<span class="hljs-string">'event'</span>, <span class="hljs-string">'pwa_mode_detection'</span>, { <span class="hljs-attr">mode</span>: <span class="hljs-string">'Standalone'</span> });
    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">"PWA is running in standalone mode, event pwa_mode_detection: Standalone sent"</span>);
} <span class="hljs-keyword">else</span> {
    <span class="hljs-title function_">gtag</span>(<span class="hljs-string">'event'</span>, <span class="hljs-string">'pwa_mode_detection'</span>, { <span class="hljs-attr">mode</span>: <span class="hljs-string">'Browser'</span> });
    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">"PWA is running in the browser, event pwa_mode_detection: Browser sent"</span>);
}

<span class="hljs-comment">// Pageview tracking</span>
<span class="hljs-title function_">gtag</span>(<span class="hljs-string">'config'</span>, <span class="hljs-string">'YOUR_GOOGLE_ANALYTICS_TRACKING_ID'</span>);
</span></code></div></pre>
<p data-start="4412" data-end="4522">In your analytics tool's reports, you can analyze data using the "PWA Mode" custom dimension or user property:</p>
<ul data-start="4524" data-end="4799">
<li data-start="4524" data-end="4601">View pageviews, user behavior, conversion rates, etc., for different modes.</li>
<li data-start="4602" data-end="4721">Create segments to only view traffic where the "PWA Mode" is "Standalone," to analyze PWA user behavior specifically.</li>
<li data-start="4722" data-end="4799">Compare user behavior differences between "Standalone" and "Browser" modes.</li>
</ul>
<p data-start="4801" data-end="4874"><strong data-start="4801" data-end="4874">Method 2: Using Different URLs or Start_URL (Optional, Less Flexible)</strong></p>
<p data-start="4876" data-end="5287">You can use a specific URL for the PWA’s start_url (defined in manifest.json) to differentiate it from other website pages. For example, you can set the start_url to <code data-start="5042" data-end="5055">/pwa-start/</code> or <code data-start="5059" data-end="5066">/app/</code>. Alternatively, if your PWA content is significantly different from your regular website content, you can deploy the PWA content on a different subdomain or directory, such as <code data-start="5243" data-end="5260">app.example.com</code> or <code data-start="5264" data-end="5286">www.example.com/app/</code>.</p>
<p data-start="5289" data-end="5517">In the analytics tool, you can differentiate PWA traffic by analyzing URL paths or domains. For example, you can filter traffic with URLs that contain <code data-start="5440" data-end="5453">/pwa-start/</code> or domains like <code data-start="5470" data-end="5487">app.example.com</code>, and treat it as PWA traffic.</p>
<p data-start="5519" data-end="5550"><strong data-start="5519" data-end="5549">Limitations of this method</strong>:</p>
<ul data-start="5552" data-end="5880">
<li data-start="5552" data-end="5798"><strong data-start="5554" data-end="5571">Less accurate</strong>: Even if users access the start_url or a specific PWA URL via the browser, they might still be counted as PWA traffic, but they're actually browser visits. Client-side JavaScript detection provides a more accurate distinction.</li>
<li data-start="5799" data-end="5880"><strong data-start="5801" data-end="5829">URL Structure Limitation</strong>: It may limit your website's URL structure design.</li>
</ul>
<h3 data-start="5882" data-end="5953">3. Server-Side User-Agent Analysis (Not Recommended, Less Reliable)</h3>
<p data-start="5955" data-end="6363">In theory, you can try to identify PWA traffic by analyzing the <code data-start="6019" data-end="6031">User-Agent</code> header of HTTP requests. Some PWAs may have specific identifiers in the User-Agent string when launched. However, the User-Agent string is easily spoofed and modified, and there are significant differences across browsers and operating systems. Thus, this method is not very reliable and is not recommended due to its low accuracy.</p>
<h3 data-start="6365" data-end="6397">Summary and Recommendations:</h3>
<p data-start="6399" data-end="6842">The most recommended method is <strong data-start="6430" data-end="6521">client-side JavaScript detection + web analytics tool custom dimensions/user properties</strong>. This method is accurate and flexible, providing rich data for PWA traffic analysis. You can add client-side JavaScript detection code to the entry file of your PWA (e.g., <code data-start="6694" data-end="6704">index.js</code>, <code data-start="6706" data-end="6715">_app.js</code>, etc.) and ensure it's executed early during page load, allowing you to set the custom dimensions or user properties early on.</p>
<p data-start="6844" data-end="7121">Configure custom dimensions or user properties in the web analytics tool and perform data analysis and segmentation in the reports. Regularly monitor your PWA traffic data to understand how your PWA is being used, and optimize your PWA app and marketing strategies accordingly.</p>
<p data-start="7123" data-end="7321" data-is-last-node="" data-is-only-node="">With these methods, you can effectively track PWA traffic, understand how many users are using your PWA, and gain deep insights into PWA user behavior to better assess and optimize your PWA project.</p></div></div></div>