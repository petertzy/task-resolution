<div data-message-author-role="assistant" data-message-id="79830255-3d5c-49f9-8a7e-26a2f0bfbd73" dir="auto" class="min-h-8 text-message relative flex w-full flex-col items-end gap-2 whitespace-normal break-words text-start [.text-message+&amp;]:mt-5" data-message-model-slug="gpt-4o-mini"><div class="flex w-full flex-col gap-1 empty:hidden first:pt-[3px]"><div class="markdown prose w-full break-words dark:prose-invert light"><p data-start="0" data-end="85">感谢你的澄清！根据你的需求，如果<code data-start="16" data-end="21">txt</code>文件里面的内容是Markdown格式的，你希望它能被渲染为Markdown格式，而如果是HTML标签格式，则显示为HTML内容。</p>
<p data-start="87" data-end="107">为了实现这个需求，我们可以进行以下修改：</p>
<ol data-start="109" data-end="301">
<li data-start="109" data-end="223">
<p data-start="112" data-end="223"><strong data-start="112" data-end="120">文本判断</strong>：在<code data-start="122" data-end="127">txt</code>文件中，我们要判断其内容是否包含Markdown语法。如果有Markdown语法，则使用<code data-start="171" data-end="182">marked.js</code>来解析并渲染；如果没有Markdown语法而是HTML标签，则直接渲染为HTML。</p>
</li>
<li data-start="225" data-end="301">
<p data-start="228" data-end="301"><strong data-start="228" data-end="249">HTML与Markdown混合判断</strong>：根据文件内容判断如何处理（如果包含Markdown语法则渲染为Markdown，否则渲染为HTML）。</p>
</li>
</ol>
<h3 data-start="303" data-end="316">修改后的代码如下：</h3>
<pre class="!overflow-visible" data-start="318" data-end="3828"><div class="overflow-y-auto p-4" dir="ltr"><code class="!whitespace-pre language-html"><span><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-keyword">html</span>&gt;</span>
<span class="hljs-tag">&lt;<span class="hljs-name">html</span> <span class="hljs-attr">lang</span>=<span class="hljs-string">"zh"</span>&gt;</span>
<span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span>
    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">"UTF-8"</span>&gt;</span>
    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">name</span>=<span class="hljs-string">"viewport"</span> <span class="hljs-attr">content</span>=<span class="hljs-string">"width=device-width, initial-scale=1.0"</span>&gt;</span>
    <span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>標題選擇頁面<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span>
    <span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">src</span>=<span class="hljs-string">"https://cdnjs.cloudflare.com/ajax/libs/marked/4.0.12/marked.min.js"</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span>
    <span class="hljs-tag">&lt;<span class="hljs-name">style</span>&gt;</span><span class="language-css">
        <span class="hljs-selector-tag">body</span> {
            <span class="hljs-attribute">display</span>: flex;
            <span class="hljs-attribute">height</span>: <span class="hljs-number">100vh</span>;
            <span class="hljs-attribute">margin</span>: <span class="hljs-number">0</span>;
            <span class="hljs-attribute">font-family</span>: Arial, sans-serif;
        }
        <span class="hljs-selector-class">.sidebar</span> {
            <span class="hljs-attribute">width</span>: <span class="hljs-number">25%</span>;
            <span class="hljs-attribute">background-color</span>: <span class="hljs-number">#D6EAF8</span>;
            <span class="hljs-attribute">padding</span>: <span class="hljs-number">20px</span>;
            <span class="hljs-attribute">box-sizing</span>: border-box;
            <span class="hljs-attribute">overflow-y</span>: auto;
        }
        <span class="hljs-selector-class">.sidebar</span> <span class="hljs-selector-tag">ul</span> {
            <span class="hljs-attribute">list-style</span>: none;
            <span class="hljs-attribute">padding</span>: <span class="hljs-number">0</span>;
        }
        <span class="hljs-selector-class">.sidebar</span> <span class="hljs-selector-tag">li</span> {
            <span class="hljs-attribute">padding</span>: <span class="hljs-number">10px</span>;
            <span class="hljs-attribute">margin</span>: <span class="hljs-number">10px</span> <span class="hljs-number">0</span>;
            <span class="hljs-attribute">background-color</span>: <span class="hljs-number">#E8DAEF</span>;
            <span class="hljs-attribute">cursor</span>: pointer;
            <span class="hljs-attribute">text-align</span>: center;
            <span class="hljs-attribute">border-radius</span>: <span class="hljs-number">5px</span>;
            <span class="hljs-attribute">transition</span>: background <span class="hljs-number">0.3s</span>;
        }
        <span class="hljs-selector-class">.sidebar</span> <span class="hljs-selector-tag">li</span><span class="hljs-selector-pseudo">:hover</span> {
            <span class="hljs-attribute">background-color</span>: <span class="hljs-number">#D2B4DE</span>;
        }
        <span class="hljs-selector-class">.content</span> {
            <span class="hljs-attribute">flex</span>: <span class="hljs-number">1</span>;
            <span class="hljs-attribute">background-color</span>: <span class="hljs-number">#FCF3CF</span>;
            <span class="hljs-attribute">display</span>: flex;
            <span class="hljs-attribute">align-items</span>: flex-start;
            <span class="hljs-attribute">justify-content</span>: flex-start;
            <span class="hljs-attribute">font-size</span>: <span class="hljs-number">1.5em</span>;
            <span class="hljs-attribute">padding</span>: <span class="hljs-number">20px</span>;
            <span class="hljs-attribute">overflow</span>: auto;
            <span class="hljs-attribute">box-sizing</span>: border-box;
        }
        pre {
            <span class="hljs-attribute">white-space</span>: pre-wrap;
            <span class="hljs-attribute">word-wrap</span>: break-word;
            <span class="hljs-attribute">max-width</span>: <span class="hljs-number">100%</span>;
            <span class="hljs-attribute">overflow-wrap</span>: break-word;
            <span class="hljs-attribute">margin</span>: <span class="hljs-number">0</span>;
            <span class="hljs-attribute">word-break</span>: break-all;
        }
    </span><span class="hljs-tag">&lt;/<span class="hljs-name">style</span>&gt;</span>
<span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span>
<span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span>
    <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"sidebar"</span>&gt;</span>
        <span class="hljs-tag">&lt;<span class="hljs-name">ul</span>&gt;</span>
            <span class="hljs-tag">&lt;<span class="hljs-name">li</span> <span class="hljs-attr">onclick</span>=<span class="hljs-string">"showContent('https://67c6c675-640a-4512-a169-b7274642eb96.usrfiles.com/ugd/67c6c6_77d56f92cbf24c5cbd88234ae9f0324a.txt')"</span>&gt;</span>1. 標題1<span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span>
            <span class="hljs-tag">&lt;<span class="hljs-name">li</span> <span class="hljs-attr">onclick</span>=<span class="hljs-string">"showContent('https://67c6c675-640a-4512-a169-b7274642eb96.usrfiles.com/ugd/67c6c6_09929b675a80483cb29f05c6be4bc949.txt')"</span>&gt;</span>2. 標題2<span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span>
            <span class="hljs-tag">&lt;<span class="hljs-name">li</span> <span class="hljs-attr">onclick</span>=<span class="hljs-string">"showContent('https://67c6c675-640a-4512-a169-b7274642eb96.usrfiles.com/ugd/67c6c6_c2491d246a934c39b48279aab9049fd7.txt')"</span>&gt;</span>3. 標題3<span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span>
        <span class="hljs-tag">&lt;/<span class="hljs-name">ul</span>&gt;</span>
    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span>
    
    <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"content"</span> <span class="hljs-attr">id</span>=<span class="hljs-string">"displayContent"</span>&gt;</span>
        點擊左側標題查看內容
    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span>

    <span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="language-javascript">
        <span class="hljs-keyword">async</span> <span class="hljs-keyword">function</span> <span class="hljs-title function_">showContent</span>(<span class="hljs-params">file</span>) {
            <span class="hljs-keyword">try</span> {
                <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">`嘗試加載文件: <span class="hljs-subst">${file}</span>`</span>);
                <span class="hljs-keyword">const</span> response = <span class="hljs-keyword">await</span> <span class="hljs-title function_">fetch</span>(file);
                <span class="hljs-keyword">if</span> (!response.<span class="hljs-property">ok</span>) <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Error</span>(<span class="hljs-string">`文件未找到 (HTTP <span class="hljs-subst">${response.status}</span>)`</span>);
                
                <span class="hljs-keyword">const</span> text = <span class="hljs-keyword">await</span> response.<span class="hljs-title function_">text</span>();

                <span class="hljs-comment">// 判断文件内容是否包含HTML标签</span>
                <span class="hljs-keyword">if</span> (<span class="hljs-title function_">isHTML</span>(text)) {
                    <span class="hljs-comment">// 如果是HTML格式，直接显示</span>
                    <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">getElementById</span>(<span class="hljs-string">'displayContent'</span>).<span class="hljs-property">innerHTML</span> = text;
                } <span class="hljs-keyword">else</span> {
                    <span class="hljs-comment">// 如果是Markdown格式或普通文本，使用marked.js渲染</span>
                    <span class="hljs-keyword">const</span> htmlContent = marked.<span class="hljs-title function_">parse</span>(text);
                    <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">getElementById</span>(<span class="hljs-string">'displayContent'</span>).<span class="hljs-property">innerHTML</span> = htmlContent;
                }

            } <span class="hljs-keyword">catch</span> (error) {
                <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">error</span>(<span class="hljs-string">"加載失敗:"</span>, error);
                <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">getElementById</span>(<span class="hljs-string">'displayContent'</span>).<span class="hljs-property">innerHTML</span> = 
                    <span class="hljs-string">`&lt;p style="color: red;"&gt;加載內容失敗，請確保文件存在且本地服務器運行中。&lt;/p&gt;`</span>;
            }
        }

        <span class="hljs-comment">// 判断文本是否包含HTML标签</span>
        <span class="hljs-keyword">function</span> <span class="hljs-title function_">isHTML</span>(<span class="hljs-params">str</span>) {
            <span class="hljs-keyword">const</span> doc = <span class="hljs-keyword">new</span> <span class="hljs-title class_">DOMParser</span>().<span class="hljs-title function_">parseFromString</span>(str, <span class="hljs-string">'text/html'</span>);
            <span class="hljs-keyword">return</span> <span class="hljs-title class_">Array</span>.<span class="hljs-title function_">from</span>(doc.<span class="hljs-property">body</span>.<span class="hljs-property">childNodes</span>).<span class="hljs-title function_">some</span>(<span class="hljs-function"><span class="hljs-params">node</span> =&gt;</span> node.<span class="hljs-property">nodeType</span> === <span class="hljs-number">1</span>); <span class="hljs-comment">// 1代表元素节点</span>
        }
    </span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span>
<span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span>
<span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span>
</span></code></div></pre>
<h3 data-start="3830" data-end="3838">关键点：</h3>
<ol data-start="3840" data-end="4243">
<li data-start="3840" data-end="3989">
<p data-start="3843" data-end="3859"><strong data-start="3843" data-end="3858"><code data-start="3845" data-end="3853">isHTML</code> 函数</strong>：</p>
<ul data-start="3863" data-end="3989">
<li data-start="3863" data-end="3923">这个函数会检查文件内容是否包含HTML标签。如果文件包含HTML标签，它会返回<code data-start="3904" data-end="3910">true</code>，否则返回<code data-start="3915" data-end="3922">false</code>。</li>
<li data-start="3927" data-end="3989">通过<code data-start="3931" data-end="3942">DOMParser</code>解析字符串，并检查是否存在元素节点（<code data-start="3960" data-end="3976">nodeType === 1</code>），即是否为HTML标签。</li>
</ul>
</li>
<li data-start="3991" data-end="4121">
<p data-start="3994" data-end="4015"><strong data-start="3994" data-end="4014"><code data-start="3996" data-end="4009">showContent</code> 函数</strong>：</p>
<ul data-start="4019" data-end="4121">
<li data-start="4019" data-end="4063">如果文件是HTML格式（通过<code data-start="4035" data-end="4043">isHTML</code>函数判断），则直接将其内容插入到页面中。</li>
<li data-start="4067" data-end="4121">如果是Markdown格式（其他非HTML文本格式），则通过<code data-start="4099" data-end="4110">marked.js</code>渲染为HTML并显示。</li>
</ul>
</li>
<li data-start="4123" data-end="4243">
<p data-start="4126" data-end="4152"><strong data-start="4126" data-end="4151">Markdown和HTML的自动识别与渲染</strong>：</p>
<ul data-start="4156" data-end="4243">
<li data-start="4156" data-end="4243">无论是<code data-start="4161" data-end="4167">.txt</code>文件，还是Markdown（<code data-start="4181" data-end="4186">.md</code>）文件，只要文件内有Markdown语法，它都会被正确渲染为HTML内容。如果文件包含HTML标签，它将直接渲染。</li>
</ul>
</li>
</ol>
<h3 data-start="4245" data-end="4252">效果：</h3>
<ul data-start="4253" data-end="4325" data-is-last-node="" data-is-only-node="">
<li data-start="4253" data-end="4325" data-is-last-node="">当点击左侧菜单的标题时，文件内容会根据其格式自动渲染。如果是Markdown格式，显示为HTML；如果是HTML格式，直接显示HTML内容。</li>
</ul></div></div></div>