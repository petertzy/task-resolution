<div data-message-author-role="assistant" data-message-id="d639c622-1e29-455f-9dfb-55f33176c6ee" dir="auto" class="min-h-8 text-message relative flex w-full flex-col items-end gap-2 whitespace-normal break-words text-start [.text-message+&amp;]:mt-5" data-message-model-slug="gpt-4o-mini"><div class="flex w-full flex-col gap-1 empty:hidden first:pt-[3px]"><div class="markdown prose w-full break-words dark:prose-invert light"><h3 data-start="0" data-end="45">The style of PWA can be fully customized!</h3>
<p data-start="47" data-end="321">The appearance and behavior of a PWA are completely customizable. It won't force you to match the mobile version of the website unless you want it to stay consistent. You can customize the look of the PWA to make it feel more like a native app through the following methods:</p>
<h4 data-start="323" data-end="399">1. Adjust the <code data-start="342" data-end="357">manifest.json</code> file to influence the PWA‚Äôs display style</h4>
<p data-start="400" data-end="498">The <code data-start="404" data-end="413">display</code> option in the <code data-start="428" data-end="443">manifest.json</code> file determines how the PWA will appear on the device:</p>
<ul data-start="500" data-end="859">
<li data-start="500" data-end="620"><code data-start="502" data-end="516">"standalone"</code>: Removes browser UI elements (such as the address bar) and makes the PWA appear more like a native app.</li>
<li data-start="621" data-end="711"><code data-start="623" data-end="637">"fullscreen"</code>: Runs the PWA in full-screen mode, suitable for games or multimedia apps.</li>
<li data-start="712" data-end="784"><code data-start="714" data-end="728">"minimal-ui"</code>: Keeps basic browser UI elements, like the back button.</li>
<li data-start="785" data-end="859"><code data-start="787" data-end="798">"browser"</code>: The PWA looks like a regular web page with minimal changes.</li>
</ul>
<p data-start="861" data-end="876">üìå <strong data-start="864" data-end="875">Example</strong>:</p>
<pre class="!overflow-visible" data-start="877" data-end="1046"><div class="overflow-y-auto p-4" dir="ltr"><code class="!whitespace-pre language-json"><span><span class="hljs-punctuation">{</span>
  <span class="hljs-attr">"name"</span><span class="hljs-punctuation">:</span> <span class="hljs-string">"My PWA App"</span><span class="hljs-punctuation">,</span>
  <span class="hljs-attr">"short_name"</span><span class="hljs-punctuation">:</span> <span class="hljs-string">"PWA"</span><span class="hljs-punctuation">,</span>
  <span class="hljs-attr">"start_url"</span><span class="hljs-punctuation">:</span> <span class="hljs-string">"/"</span><span class="hljs-punctuation">,</span>
  <span class="hljs-attr">"display"</span><span class="hljs-punctuation">:</span> <span class="hljs-string">"standalone"</span><span class="hljs-punctuation">,</span>
  <span class="hljs-attr">"theme_color"</span><span class="hljs-punctuation">:</span> <span class="hljs-string">"#4CAF50"</span><span class="hljs-punctuation">,</span>
  <span class="hljs-attr">"background_color"</span><span class="hljs-punctuation">:</span> <span class="hljs-string">"#FFFFFF"</span>
<span class="hljs-punctuation">}</span>
</span></code></div></pre>
<p data-start="1047" data-end="1122">You can change <code data-start="1062" data-end="1075">theme_color</code> to match the primary color scheme of your app.</p>
<h4 data-start="1124" data-end="1171">2. Use CSS to make the PWA mobile-friendly</h4>
<p data-start="1172" data-end="1304">Even if the PWA shares the same HTML code as your website, you can still apply CSS to make it look different in the PWA environment.</p>
<p data-start="1306" data-end="1321">üìå <strong data-start="1309" data-end="1320">Example</strong>:</p>
<pre class="!overflow-visible" data-start="1322" data-end="1607"><div class="overflow-y-auto p-4" dir="ltr"><code class="!whitespace-pre language-css"><span><span class="hljs-keyword">@media</span> all <span class="hljs-keyword">and</span> (<span class="hljs-attribute">display-mode</span>: standalone) {
  <span class="hljs-selector-tag">body</span> {
    <span class="hljs-attribute">background-color</span>: <span class="hljs-number">#f5f5f5</span>;
    <span class="hljs-attribute">padding-top</span>: <span class="hljs-number">20px</span>;
  }
  <span class="hljs-selector-class">.header</span> {
    <span class="hljs-attribute">display</span>: none; <span class="hljs-comment">/* Hide the website's navigation bar */</span>
  }
  <span class="hljs-selector-class">.pwa-nav</span> {
    <span class="hljs-attribute">display</span>: flex; <span class="hljs-comment">/* Show a bottom navigation bar specific to PWA */</span>
  }
}
</span></code></div></pre>
<p data-start="1608" data-end="1709">The <code data-start="1612" data-end="1638">display-mode: standalone</code> style will only apply in the PWA environment, not in regular browsers.</p>
<h4 data-start="1711" data-end="1752">3. Use JavaScript to detect PWA mode</h4>
<p data-start="1753" data-end="1894">If you want to offer different UIs between the PWA and the regular web version, you can use JavaScript to detect if it's running in PWA mode.</p>
<p data-start="1896" data-end="1911">üìå <strong data-start="1899" data-end="1910">Example</strong>:</p>
<pre class="!overflow-visible" data-start="1912" data-end="2125"><div class="overflow-y-auto p-4" dir="ltr"><code class="!whitespace-pre language-javascript"><span><span class="hljs-keyword">if</span> (<span class="hljs-variable language_">window</span>.<span class="hljs-title function_">matchMedia</span>(<span class="hljs-string">'(display-mode: standalone)'</span>).<span class="hljs-property">matches</span>) {
  <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">"Running in PWA mode"</span>);
  <span class="hljs-variable language_">document</span>.<span class="hljs-property">body</span>.<span class="hljs-property">classList</span>.<span class="hljs-title function_">add</span>(<span class="hljs-string">"pwa-mode"</span>);
} <span class="hljs-keyword">else</span> {
  <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">"Running in the browser"</span>);
}
</span></code></div></pre>
<p data-start="2126" data-end="2190">Then, you can target <code data-start="2147" data-end="2158">.pwa-mode</code> in your CSS for custom styling.</p>
<h4 data-start="2192" data-end="2265">4. Use frameworks (like React, Vue) to create a separate PWA version</h4>
<p data-start="2266" data-end="2480">If your website is a responsive web app (RWA), you can use frameworks like React, Vue, or Angular to create a different UI for the PWA, and even define a separate entry point for the PWA version in the <code data-start="2468" data-end="2479">start_url</code>:</p>
<pre class="!overflow-visible" data-start="2482" data-end="2518"><div class="overflow-y-auto p-4" dir="ltr"><code class="!whitespace-pre language-json"><span><span class="hljs-attr">"start_url"</span><span class="hljs-punctuation">:</span> <span class="hljs-string">"/pwa-home"</span>
</span></code></div></pre>
<p data-start="2519" data-end="2596">This way, the PWA directly opens <code data-start="2552" data-end="2563">/pwa-home</code> instead of the regular homepage.</p>
<h4 data-start="2598" data-end="2637">5. Add native-app-like UI elements</h4>
<p data-start="2638" data-end="2735">You can implement certain design elements that make the PWA feel more like a native app, such as:</p>
<ul data-start="2737" data-end="2835">
<li data-start="2737" data-end="2761">Bottom navigation bars</li>
<li data-start="2762" data-end="2808">Card-style UIs (Material Design / iOS style)</li>
<li data-start="2809" data-end="2835">Gesture-based navigation</li>
</ul>
<p data-start="2837" data-end="2903">These can help make your PWA look and feel more like a native app.</p>
<p data-start="2905" data-end="2920">üìå <strong data-start="2908" data-end="2919">Example</strong>:</p>
<pre class="!overflow-visible" data-start="2921" data-end="3065"><div class="overflow-y-auto p-4" dir="ltr"><code class="!whitespace-pre language-html"><span><span class="hljs-tag">&lt;<span class="hljs-name">nav</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"pwa-nav"</span>&gt;</span>
  <span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">"/home"</span>&gt;</span>üè† Home<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span>
  <span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">"/profile"</span>&gt;</span>üë§ Profile<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span>
  <span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">"/settings"</span>&gt;</span>‚öôÔ∏è Settings<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span>
<span class="hljs-tag">&lt;/<span class="hljs-name">nav</span>&gt;</span>
</span></code></div></pre>
<pre class="!overflow-visible" data-start="3067" data-end="3270"><div class="overflow-y-auto p-4" dir="ltr"><code class="!whitespace-pre language-css"><span><span class="hljs-selector-class">.pwa-nav</span> {
  <span class="hljs-attribute">position</span>: fixed;
  <span class="hljs-attribute">bottom</span>: <span class="hljs-number">0</span>;
  <span class="hljs-attribute">width</span>: <span class="hljs-number">100%</span>;
  <span class="hljs-attribute">display</span>: flex;
  <span class="hljs-attribute">justify-content</span>: space-around;
  <span class="hljs-attribute">background</span>: white;
  <span class="hljs-attribute">box-shadow</span>: <span class="hljs-number">0</span> -<span class="hljs-number">2px</span> <span class="hljs-number">10px</span> <span class="hljs-built_in">rgba</span>(<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0.1</span>);
  <span class="hljs-attribute">padding</span>: <span class="hljs-number">10px</span> <span class="hljs-number">0</span>;
}
</span></code></div></pre>
<p data-start="3271" data-end="3399">This way, your PWA will have a bottom navigation bar like a native app, rather than the typical navigation of a regular website.</p>
<h3 data-start="3401" data-end="3412">Summary</h3>
<ul data-start="3413" data-end="4014" data-is-only-node="" data-is-last-node="">
<li data-start="3413" data-end="3482">You can modify <code data-start="3430" data-end="3445">manifest.json</code> to control how the PWA is displayed.</li>
<li data-start="3483" data-end="3542">Use CSS <code data-start="3493" data-end="3501">@media</code> rules to set unique styles for PWA mode.</li>
<li data-start="3543" data-end="3626">Use JavaScript to detect if the app is in PWA mode and adjust the UI accordingly.</li>
<li data-start="3627" data-end="3713">Use front-end frameworks (like React, Vue) to create a separate version for the PWA.</li>
<li data-start="3714" data-end="3832">Design custom UI elements like bottom navigation or gesture-based navigation to make the PWA feel like a native app.</li>
<li data-start="3833" data-end="4014" data-is-last-node="">If you want your PWA to look more native, consider using Material Design or iOS-style elements, along with CSS animations and gesture interactions to make the experience smoother.</li>
</ul></div></div></div>