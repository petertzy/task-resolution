<div data-message-author-role="assistant" data-message-id="f4646120-fc23-40fc-8d90-1f2a4fa780ba" dir="auto" class="min-h-8 text-message relative flex w-full flex-col items-end gap-2 whitespace-normal break-words text-start [.text-message+&amp;]:mt-5" data-message-model-slug="gpt-4o-mini"><div class="flex w-full flex-col gap-1 empty:hidden first:pt-[3px]"><div class="markdown prose w-full break-words dark:prose-invert light"><p data-start="0" data-end="392">Die Ermittlung, ob ein Benutzer eine PWA (Progressive Web App) verwendet und das Tracking des PWA-Traffics ist vollkommen machbar. Dies ist entscheidend, um die Akzeptanz von PWAs, das Benutzerverhalten und die Bewertung ihrer Leistung zu verstehen. Hier sind einige gängige Methoden, die Ihnen helfen, zu erkennen, ob Benutzer eine PWA verwenden und wie Sie den PWA-Traffic verfolgen können:</p>
<h3 data-start="394" data-end="466">1. Client-seitige JavaScript-Erkennung (Am häufigsten und Empfohlen)</h3>
<p data-start="468" data-end="881">Dies ist die gängigste und zuverlässigste Methode. Mit JavaScript-Code auf der Client-Seite können Sie feststellen, ob die PWA im „Standalone-Modus“ ausgeführt wird. Wenn eine PWA über ein installiertes App-Symbol gestartet wird, läuft sie normalerweise im Standalone-Modus, wobei die Adressleiste des Browsers und die Benutzeroberflächenelemente ausgeblendet werden, sodass sie mehr wie eine native App aussieht.</p>
<p data-start="883" data-end="1058">Sie können die JavaScript-APIs <code data-start="914" data-end="963">window.matchMedia('(display-mode: standalone)')</code> oder <code data-start="969" data-end="991">navigator.standalone</code> verwenden, um festzustellen, ob die PWA im Standalone-Modus läuft.</p>
<p data-start="1060" data-end="1145"><strong data-start="1060" data-end="1111">window.matchMedia('(display-mode: standalone)')</strong> (Moderne und empfohlene Methode):</p>
<pre class="!overflow-visible" data-start="1147" data-end="1519"><div class="overflow-y-auto p-4" dir="ltr"><code class="!whitespace-pre language-javascript"><span><span class="hljs-keyword">function</span> <span class="hljs-title function_">isRunningStandalone</span>(<span class="hljs-params"></span>) {
    <span class="hljs-keyword">return</span> <span class="hljs-variable language_">window</span>.<span class="hljs-title function_">matchMedia</span>(<span class="hljs-string">'(display-mode: standalone)'</span>).<span class="hljs-property">matches</span>;
}

<span class="hljs-keyword">if</span> (<span class="hljs-title function_">isRunningStandalone</span>()) {
    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">"PWA läuft im Standalone-Modus"</span>);
    <span class="hljs-comment">// Führen Sie hier das Tracking für den PWA-Modus aus</span>
} <span class="hljs-keyword">else</span> {
    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">"PWA läuft im Browser"</span>);
    <span class="hljs-comment">// Führen Sie hier das Tracking für den Browser-Modus aus</span>
}
</span></code></div></pre>
<p data-start="1521" data-end="1604"><strong data-start="1521" data-end="1545">navigator.standalone</strong> (Älter, aber immer noch von einigen Browsern unterstützt):</p>
<pre class="!overflow-visible" data-start="1606" data-end="1838"><div class="overflow-y-auto p-4" dir="ltr"><code class="!whitespace-pre language-javascript"><span><span class="hljs-keyword">if</span> (navigator.<span class="hljs-property">standalone</span> === <span class="hljs-literal">true</span>) {
    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">"PWA läuft im Standalone-Modus (mit navigator.standalone)"</span>);
    <span class="hljs-comment">// ...</span>
} <span class="hljs-keyword">else</span> {
    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">"PWA läuft im Browser (mit navigator.standalone)"</span>);
    <span class="hljs-comment">// ...</span>
}
</span></code></div></pre>
<p data-start="1840" data-end="1928">Mit diesen Erkennungsmethoden können Sie zwei Szenarien in Ihrem PWA-Code unterscheiden:</p>
<ul data-start="1930" data-end="2401">
<li data-start="1930" data-end="2115"><strong data-start="1932" data-end="1965">PWA läuft im Standalone-Modus</strong>: Dies bedeutet in der Regel, dass der Benutzer die App über das installierte PWA-Symbol gestartet hat, und es kann als PWA-Traffic betrachtet werden.</li>
<li data-start="2116" data-end="2401"><strong data-start="2118" data-end="2142">PWA läuft im Browser</strong>: Dies bedeutet normalerweise, dass der Benutzer die App über die Adressleiste des Browsers, Browser-Lesezeichen oder externe Links (wie Google-Suchergebnisse, Telegram-Links usw.) aufgerufen hat, und dies kann als regulärer Website-Traffic betrachtet werden.</li>
</ul>
<h3 data-start="2403" data-end="2490">2. Integration von Web-Analyse-Tools (z. B. Google Analytics, Baidu Analytics usw.)</h3>
<p data-start="2492" data-end="2841">Sie können gängige Web-Analyse-Tools (wie Google Analytics, Baidu Analytics oder andere Analyse-Tools, die in Ihrem Projekt verwendet werden) in Ihre PWA integrieren. Der Schlüssel besteht darin, die oben genannten JavaScript-Erkennungsmethoden mit Ihrem Analyse-Code zu kombinieren, um den PWA-Traffic vom normalen Website-Traffic zu unterscheiden.</p>
<p data-start="2843" data-end="2928"><strong data-start="2843" data-end="2928">Methode 1: Verwendung von benutzerdefinierten Dimensionen oder Benutzerattributen</strong></p>
<p data-start="2930" data-end="3308">Dies ist die empfohlene Methode, da sie flexibel ist und es einfach macht, Daten in Berichten zu segmentieren und zu filtern. Erstellen Sie in Ihrem Analyse-Tool eine benutzerdefinierte Dimension oder ein Benutzerattribut, z. B. „PWA-Modus“ (oder einen ähnlichen Namen). Der Wert dieser Dimension kann „Standalone“ (für Standalone-Modus) oder „Browser“ (für Browser-Modus) sein.</p>
<p data-start="3310" data-end="3444">Kombinieren Sie im PWA-Code die JavaScript-Erkennungsmethode, um diese benutzerdefinierte Dimension oder Benutzerattribut festzulegen.</p>
<p data-start="3446" data-end="3490">Zum Beispiel mit Google Analytics (gtag.js):</p>
<pre class="!overflow-visible" data-start="3492" data-end="4211"><div class="overflow-y-auto p-4" dir="ltr"><code class="!whitespace-pre language-javascript"><span><span class="hljs-keyword">function</span> <span class="hljs-title function_">isRunningStandalone</span>(<span class="hljs-params"></span>) {
    <span class="hljs-keyword">return</span> <span class="hljs-variable language_">window</span>.<span class="hljs-title function_">matchMedia</span>(<span class="hljs-string">'(display-mode: standalone)'</span>).<span class="hljs-property">matches</span>;
}

<span class="hljs-comment">// Initialisieren Sie Google Analytics (stellen Sie sicher, dass der GA-Code korrekt konfiguriert ist)</span>
<span class="hljs-comment">// ...</span>

<span class="hljs-keyword">if</span> (<span class="hljs-title function_">isRunningStandalone</span>()) {
    <span class="hljs-title function_">gtag</span>(<span class="hljs-string">'set'</span>, <span class="hljs-string">'user_properties'</span>, { <span class="hljs-attr">pwa_mode</span>: <span class="hljs-string">'Standalone'</span> });
    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">"PWA läuft im Standalone-Modus, GA benutzerdefinierte Dimension pwa_mode: Standalone gesetzt"</span>);
} <span class="hljs-keyword">else</span> {
    <span class="hljs-title function_">gtag</span>(<span class="hljs-string">'set'</span>, <span class="hljs-string">'user_properties'</span>, { <span class="hljs-attr">pwa_mode</span>: <span class="hljs-string">'Browser'</span> });
    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">"PWA läuft im Browser, GA benutzerdefinierte Dimension pwa_mode: Browser gesetzt"</span>);
}

<span class="hljs-comment">// Seitenansicht-Tracking (oder anderes Event-Tracking)</span>
<span class="hljs-title function_">gtag</span>(<span class="hljs-string">'config'</span>, <span class="hljs-string">'YOUR_GOOGLE_ANALYTICS_TRACKING_ID'</span>);
</span></code></div></pre>
<p data-start="4213" data-end="4291">Alternativ können Sie Ereignisse mit benutzerdefinierten Parametern verwenden:</p>
<pre class="!overflow-visible" data-start="4293" data-end="4896"><div class="overflow-y-auto p-4" dir="ltr"><code class="!whitespace-pre language-javascript"><span><span class="hljs-keyword">function</span> <span class="hljs-title function_">isRunningStandalone</span>(<span class="hljs-params"></span>) {
    <span class="hljs-keyword">return</span> <span class="hljs-variable language_">window</span>.<span class="hljs-title function_">matchMedia</span>(<span class="hljs-string">'(display-mode: standalone)'</span>).<span class="hljs-property">matches</span>;
}

<span class="hljs-comment">// Initialisieren Sie Google Analytics</span>
<span class="hljs-comment">// ...</span>

<span class="hljs-keyword">if</span> (<span class="hljs-title function_">isRunningStandalone</span>()) {
    <span class="hljs-title function_">gtag</span>(<span class="hljs-string">'event'</span>, <span class="hljs-string">'pwa_mode_detection'</span>, { <span class="hljs-attr">mode</span>: <span class="hljs-string">'Standalone'</span> });
    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">"PWA läuft im Standalone-Modus, Ereignis pwa_mode_detection: Standalone gesendet"</span>);
} <span class="hljs-keyword">else</span> {
    <span class="hljs-title function_">gtag</span>(<span class="hljs-string">'event'</span>, <span class="hljs-string">'pwa_mode_detection'</span>, { <span class="hljs-attr">mode</span>: <span class="hljs-string">'Browser'</span> });
    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">"PWA läuft im Browser, Ereignis pwa_mode_detection: Browser gesendet"</span>);
}

<span class="hljs-comment">// Seitenansicht-Tracking</span>
<span class="hljs-title function_">gtag</span>(<span class="hljs-string">'config'</span>, <span class="hljs-string">'YOUR_GOOGLE_ANALYTICS_TRACKING_ID'</span>);
</span></code></div></pre>
<p data-start="4898" data-end="5050">In den Berichten des Analyse-Tools können Sie die „PWA-Modus“-benutzerdefinierte Dimension oder das Benutzerattribut verwenden, um Daten zu analysieren:</p>
<ul data-start="5052" data-end="5386">
<li data-start="5052" data-end="5147">Überprüfen Sie Seitenaufrufe, Benutzerverhalten, Konversionsraten usw. für verschiedene Modi.</li>
<li data-start="5148" data-end="5300">Erstellen Sie Segmente, um nur den Verkehr zu betrachten, bei dem der „PWA-Modus“ „Standalone“ ist, um das Verhalten von PWA-Benutzern zu analysieren.</li>
<li data-start="5301" data-end="5386">Vergleichen Sie das Benutzerverhalten zwischen den Modi „Standalone“ und „Browser“.</li>
</ul>
<p data-start="5388" data-end="5480"><strong data-start="5388" data-end="5480">Methode 2: Verwendung unterschiedlicher URLs oder Start_URL (Optional, weniger flexibel)</strong></p>
<p data-start="5482" data-end="5985">Sie können eine spezifische URL für die <code data-start="5522" data-end="5533">start_url</code> der PWA (in der <code data-start="5550" data-end="5565">manifest.json</code> definiert) verwenden, um sie von anderen Website-Seiten zu unterscheiden. Zum Beispiel können Sie die <code data-start="5668" data-end="5679">start_url</code> der PWA auf <code data-start="5692" data-end="5705">/pwa-start/</code> oder <code data-start="5711" data-end="5718">/app/</code> setzen. Alternativ, wenn der Inhalt Ihrer PWA sich erheblich vom Inhalt Ihrer regulären Website unterscheidet, können Sie den PWA-Inhalt auf einer anderen Subdomain oder in einem anderen Verzeichnis bereitstellen, z. B. <code data-start="5939" data-end="5956">app.example.com</code> oder <code data-start="5962" data-end="5984">www.example.com/app/</code>.</p>
<p data-start="5987" data-end="6249">Im Analyse-Tool können Sie den PWA-Traffic anhand von URL-Pfaden oder Domains unterscheiden. Sie können beispielsweise den gesamten Verkehr filtern, dessen URL <code data-start="6147" data-end="6160">/pwa-start/</code> enthält oder dessen Domain <code data-start="6188" data-end="6205">app.example.com</code> ist, und diesen als PWA-Traffic betrachten.</p>
<p data-start="6251" data-end="6286"><strong data-start="6251" data-end="6285">Einschränkungen dieser Methode</strong>:</p>
<ul data-start="6288" data-end="6676">
<li data-start="6288" data-end="6590"><strong data-start="6290" data-end="6307">Weniger genau</strong>: Selbst wenn Benutzer über den Browser auf die <code data-start="6355" data-end="6366">start_url</code> oder eine spezifische PWA-URL zugreifen, könnte dieser als PWA-Traffic gezählt werden, obwohl es sich tatsächlich um einen Browserzugriff handelt. Die client-seitige JavaScript-Erkennung bietet eine genauere Unterscheidung.</li>
<li data-start="6591" data-end="6676"><strong data-start="6593" data-end="6625">URL-Struktur-Einschränkungen</strong>: Es kann Ihre URL-Strukturgestaltung einschränken.</li>
</ul>
<h3 data-start="6678" data-end="6756">3. Serverseitige User-Agent-Analyse (Nicht empfohlen, weniger zuverlässig)</h3>
<p data-start="6758" data-end="7266">Theoretisch könnten Sie versuchen, den PWA-Traffic zu erkennen, indem Sie den <code data-start="6836" data-end="6848">User-Agent</code>-Header der HTTP-Anfragen analysieren. Einige PWAs könnten beim Starten spezifische Kennzeichen im <code data-start="6947" data-end="6959">User-Agent</code>-String enthalten. Der <code data-start="6982" data-end="6994">User-Agent</code>-String kann jedoch leicht gefälscht und geändert werden, und es gibt signifikante Unterschiede zwischen verschiedenen Browsern und Betriebssystemen. Daher ist diese Methode nicht besonders zuverlässig und sollte aufgrund ihrer geringen Genauigkeit nicht verwendet werden.</p>
<h3 data-start="7268" data-end="7305">Zusammenfassung und Empfehlungen:</h3>
<p data-start="7307" data-end="7841">Die am meisten empfohlene Methode ist <strong data-start="7345" data-end="7459">client-seitige JavaScript-Erkennung + Web-Analyse-Tools mit benutzerdefinierten Dimensionen/Benutzerattributen</strong>. Diese Methode ist genau und flexibel und bietet reichhaltige Daten für die PWA-Traffic-Analyse. Sie können den JavaScript-Erkennungs-Code in die Einstiegsdatei Ihrer PWA (z. B. <code data-start="7638" data-end="7648">index.js</code>, <code data-start="7650" data-end="7659">_app.js</code> usw.) einfügen und sicherstellen, dass er frühzeitig während des Seitenaufrufs ausgeführt wird, um die benutzerdefinierten Dimensionen oder Benutzerattributs frühzeitig festzulegen.</p>
<p data-start="7843" data-end="8189">Konfigurieren Sie benutzerdefinierte Dimensionen oder Benutzerattribute in Ihrem Web-Analyse-Tool und führen Sie eine Datenanalyse und -segmentierung in den Berichten durch. Überwachen Sie regelmäßig Ihre PWA-Traffic-Daten, um zu verstehen, wie Ihre PWA verwendet wird, und optimieren Sie Ihre PWA-App sowie Ihre Marketingstrategien entsprechend.</p>
<p data-start="8191" data-end="8430" data-is-last-node="" data-is-only-node="">Mit diesen Methoden können Sie PWA-Traffic effektiv verfolgen, herausfinden, wie viele Benutzer Ihre PWA verwenden, und tiefere Einblicke in das Verhalten von PWA-Benutzern erhalten, um Ihr PWA-Projekt besser zu bewerten und zu optimieren.</p></div></div></div>